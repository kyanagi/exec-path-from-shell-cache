;;; exec-path-from-shell-cache.el --- Cache environment variables set via exec-path-from-shell  -*- lexical-binding: t -*-

;; Copyright (C) 2022 Kouhei Yanagita

;; Author: Kouhei Yanagita <yanagi@shakenbu.org>
;; URL: https://github.com/kyanagi/exec-path-from-shell-cache
;; Version: 0.0.1
;; Package-Requires: ((emacs "24.1") (exec-path-from-shell))

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; exec-path-from-shell https://github.com/purcell/exec-path-from-shell is a
;; library which set environment variables from the shell.
;; exec-path-from-shell-cache caches the results of exec-path-from-shell execution
;; and saves time on shell calls.

;; Usage:

;; If you have the following configuration,
;;
;;     (require 'exec-path-from-shell)
;;     (exec-path-from-shell-initialize)
;;
;; rewrite it as follows:
;;
;;     (require 'exec-path-from-shell-cache)
;;     (exec-path-from-shell-cache-initialize-with-cache)
;;
;; Cache data is saved to the file specified by `exec-path-from-shell-cache-file'.
;; If environment variables in your shell are updated,
;; run `exec-path-from-shell-cache-force-initialize' to reload them.

;;; Code:

(require 'exec-path-from-shell)

(defgroup exec-path-from-shell-cache nil
  "Cache environment variables set via exec-path-from-shell."
  :prefix "exec-path-from-shell-cache-"
  :group 'environment)

(defcustom exec-path-from-shell-cache-file
  (locate-user-emacs-file "path-cache")
  "File to save cache data into."
  :group 'exec-path-from-shell-cache
  :type 'file)

(defcustom exec-path-from-shell-cache-file-modes #o600
  "Default permissions of the cache file.
If non-nil, mode bits of the file `exec-path-from-shell-cache-file'
is set to this value."
  :group 'exec-path-from-shell-cache
  :type 'integer)

(defvar exec-path-from-shell-cache--cache nil
  "Cache data for environment variables")

(defvar exec-path-from-shell-cache--coding-system 'utf-8-unix
  "The coding system used for saving cache data.")

;;;###autoload
(defun exec-path-from-shell-cache-load-cache ()
  "Load cache from `exec-path-from-shell-cache-file' and set environment variables."
  (interactive)
  (let ((file (expand-file-name exec-path-from-shell-cache-file)))
    (setq exec-path-from-shell-cache--cache nil)
    (when (file-readable-p file)
      (load-file file)
      (dolist (name-value exec-path-from-shell-cache--cache)
        (let ((name (car name-value))
              (value (cdr name-value)))
          (exec-path-from-shell-setenv name value))))
    exec-path-from-shell-cache--cache))

(defun exec-path-from-shell-cache--dump-variables ()
  "Dump variables specified by `exec-path-from-shell-variables'."
  (insert (format
           (concat
            ";; -*- mode: emacs-lisp; coding: %s -*-\n"
            ";; Automatically generated by 'exec-path-from-shell-cache'\n")
           exec-path-from-shell-cache--coding-system))
  (insert "\n(setq exec-path-from-shell-cache--cache\n")
  (insert "      '(\n")
  (dolist (name exec-path-from-shell-variables)
    (let ((value (getenv name)))
      (insert (format "        %S\n" (cons name value)))))
  (insert "       ))\n"))

;;;###autoload
(defun exec-path-from-shell-cache-save-cache ()
  "Save cache to `exec-path-from-shell-cache-file'."
  (interactive)
  (condition-case error
      (with-temp-buffer
        (erase-buffer)
        (exec-path-from-shell-cache--dump-variables)
        (let ((coding-system-for-write exec-path-from-shell-cache--coding-system)
              (file (expand-file-name exec-path-from-shell-cache-file)))
          (write-region (point-min) (point-max) file)
          (when exec-path-from-shell-cache-file-modes
            (set-file-modes file exec-path-from-shell-cache-file-modes))))
    (error
     (lwarn '(exec-path-from-shell-cache) :warning
            "exec-path-from-shell-cache-save-cache: %s" (error-message-string error)))))

;;;###autoload
(defun exec-path-from-shell-cache-initialize-with-cache ()
  "Initialize the environment respecting cache.

If the file specified by `exec-path-from-shell-cache-file' exists,
read data from it and initialize the environment with that data.
Otherwise, call `exec-path-from-shell-initialize' and save its result
to `exec-path-from-shell-cache-file'."
  (interactive)
  (unless (exec-path-from-shell-cache-load-cache)
    (message "Calling exec-path-from-shell-initialize")
    (when (exec-path-from-shell-initialize)
      (exec-path-from-shell-cache-save-cache))))

;;;###autoload
(defun exec-path-from-shell-cache-invalidate-cache ()
  "Invalidate cache data of environment variables."
  (interactive)
  (setq exec-path-from-shell-cache--cache nil)
  (delete-file exec-path-from-shell-cache-file))

;;;###autoload
(defun exec-path-from-shell-cache-force-initialize ()
  "Initialize the environment from the user's shell regardless of cache."
  (interactive)
  (exec-path-from-shell-cache-invalidate-cache)
  (exec-path-from-shell-cache-initialize-with-cache))

(provide 'exec-path-from-shell-cache)

;;; exec-path-from-shell-cache.el ends here
